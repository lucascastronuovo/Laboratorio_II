--2.	Mostrar las distintas funciones (jobs) que pueden cumplir los empleados.
select * from job



--3.	Desplegar el nombre completo de todos los empleados (Ej: Adam, Diane) ordenados por apellido.
select first_name || ' ' || last_name from employee


--4.	Mostrar el nombre y el apellido de los empleados que ganan entre $1500 y $2850.
select first_name, last_name, salary from employee
where salary between 1500 AND 2850


--5.	Mostrar el nombre y la fecha de ingreso de todos los empleados que ingresaron en el año 2006.
select first_name, hire_date from employee
where hire_date between '01/01/06' AND '31/12/06'


--6.	Mostrar el id y nombre de todos los departamentos de la localidad 122. 
select department_id, name from department
where location_id = 122


--7.	Modificar el ejercicio anterior para que la localidad pueda ser ingresada en el momento de efectuar la consulta.




--8   	Mostrar el nombre y salario de los empleados que no tienen jefe.

select first_name, salary from employee
where manager_id is NULL


--9.	Mostrar el nombre de los empleados, su comisión y un cartel que diga ¨Sin comisión¨ para aquellos empleados que tienen su comisión en nulo.

select first_name, nvl(commission,'sin comisión') from employee --No funciona


--10.	Mostrar el nombre completo de los empleados, el número de departamento y el nombre del departamento donde trabajan.
select first_name || ' ' || last_name as NOMBRE_COMPLETO, e.department_id, name  
from employee e, department d
where e.department_id = d.department_id

--11.	Mostrar el nombre y apellido, la función que ejercen, el nombre del departamento y el salario de todos los empleados ordenados por su apellido.
select first_name, last_name, function, name, salary
from employee e, department d, job j
where e.department_id = d.department_id AND e.job_id = j.job_id
order by last_name


--12.	Para todos los empleados que cobran comisión, mostrar su nombre, el nombre del departamento donde trabajan y el nombre de la región a la que pertenece el departamento
select first_name, name, regional_group
from employee e, department d, location l
where commission is not null AND e.department_id = d.department_id AND d.location_id = l.location_id


-- 13.	Para cada empleado mostrar su id, apellido, salario y grado de salario.



--14.	Mostrar el número y nombre de cada empleado junto con el número de empleado y nombre de su jefe.
select e.employee_id, e.first_name, m.employee_id, m.first_name
from employee e, employee m
where e.manager_id = m.employee_id


--15.	Modificar el ejercicio anterior para mostrar también aquellos empleados que no tienen jefe. 
select e.employee_id, e.first_name, m.employee_id, m.first_name
from employee e, employee m
where e.manager_id = m.employee_id (+)


--16.	Mostrar las órdenes de venta, el nombre del cliente al que se vendió y la descripción  de los productos. Ordenar la  consulta por nro. de orden.
select s.order_id, name, description
from sales_order s, customer c, product p, item i
where s.customer_id = c.customer_id AND (i.product_id = p.product_id) AND s.order_id = i.order_id
order by order_id



--17.	Mostrar la cantidad de clientes.
select count(customer_id) from customer


--18.	Mostrar la cantidad de clientes del estado de Nueva York (NY).
select count(customer_id) from customer
where state = 'NY'



--19.	Mostrar la cantidad de empleados que son jefes. Nombrar a la columna JEFES.
select count(manager_id) as JEFES from employee


--20.	Mostrar toda la información del empleado más antiguo. 
select * from employee
where hire_date in (select min(hire_date) from employee)




--21.	Generar un listado con el nombre completo de los empleados, el salario, y el nombre de su departamento para todos los empleados que tengan el mismo cargo que John Smith.
--      Ordenar la salida por salario y apellido.

select first_name, last_name, salary, name
from employee e, department d
where e.department_id = d.department_id AND job_id in (select job_id from employee where first_name = 'JOHN' AND last_name = 'SMITH')
order by salary, last_name



--22.	Seleccionar los nombres completos, el nombre del departamento y el salario de aquellos empleados que ganan más que el promedio de salarios.
select first_name, last_name, name, salary
from employee e, department d
where e.department_id = d.department_id AND salary > (select avg(salary) from employee)



--23.	Mostrar los datos de las órdenes máxima y mínima.



--24.	Mostrar la cantidad de órdenes agrupadas por cliente. 
select count(order_id) from sales_order
group by customer_id


--25.	Modificar el ejercicio anterior para desplegar también el nombre y teléfono del cliente. 
select count(order_id), name, phone_number
from sales_order s, customer c
where s.customer_id = c.customer_id
group by name, phone_number


-- 26.	Mostrar aquellos empleados que tienen dos ó más personas a su cargo.
select m.* from employee
where 2 <= (select count(manager_id) from employee group by employee_id) --no me salió



--27.	Desplegar el nombre del empleado más antiguo y del empleado más nuevo, (según su fecha de ingreso).
select first_name from employee
where hire_date = (select min(hire_date) from employee) OR hire_date = (select max(hire_date) from employee)


--28.	Mostrar la cantidad de empleados que tiene los departamentos 20 y 30.
select count(employee_id) from employee
where department_id in (20, 30)


--29.	Mostrar el promedio de salarios de los empleados de los departamentos de investigación (Research). Redondear el promedio a dos decimales.
select round(avg(salary))
from employee e, department d
where e.department_id = d.department_id AND name = 'RESEARCH'



--30.	Por cada departamento desplegar su id, su nombre y el promedio de salarios (sin decimales) de sus empleados. El resultado ordenarlo por promedio.
select e.department_id, name, trunc(avg(salary))
from department d, employee e
where d.department_id = e.department_id
group by e.department_id, name
order by avg(salary)

--31.	Modificar el ejercicio anterior para mostrar solamente los departamentos que tienen más de 3 empleados.
select e.department_id, name, trunc(avg(salary))
from department d, employee e
where d.department_id = e.department_id AND 3 < (select count(employee_id) from employee)
group by e.department_id, name
order by avg(salary)

--32.	Por cada producto (incluir todos los productos)  mostrar la cantidad de unidades que se han pedido y el precio máximo que se ha facturado. 
select count(p.product_id), max(actual_price)
from product p, item i
where p.product_id = i.product_id
group by p.product_id


--33.	 Para cada cliente mostrar nombre, teléfono, la cantidad de órdenes emitidas y la fecha de su última orden. Ordenar el resultado por nombre de cliente.
select name, phone_number, count(order_id), max(order_date)
from customer c, sales_order s
where c.customer_id = s.customer_id
group by name, phone_number



--34.	Para todas las localidades mostrar sus datos, la cantidad de empleados que tiene y el total de salarios de sus empleados. Ordenar por cantidad de empleados.
select l.location_id, regional_group, count(employee_id), sum(salary)
from location l, department d, employee e
where e.department_id = d.department_id AND d.location_id = l.location_id
group by l.location_id, regional_group
order by count(employee_id)


--35.	Mostrar los empleados que ganan más que su jefe. El reporte debe mostrar el nombre completo del empleado, su salario, el nombre del departamento al que pertenece
--      y la función que ejerce.

select e.first_name, e.last_name, e.salary, name, function
from employee e, employee m, department d, job j
where e.department_id = d.department_id AND e.job_id = j.job_id AND e.manager_id = m.employee_id AND e.salary > m.salary




/*

--Segunda parte -  Manipulación y Definición de datos


--1.	Insertar un par de filas en la tabla JOB.
--start transaction

insert into job (job_id , function) values (673,'ADMINISTRATOR')

insert into job (job_id , function) values (674, 'DEVELOPER')



--2.	Hacer COMMIT. ???

--commit

--3.	Eliminar las filas insertadas en la tabla JOB.
--begin transaction

delete from job where job_id=673 or job_id=674



--4.	Hacer ROLLBACK ???.

--rollback

5.	Seleccionar todas las filas de la tabla JOB.
6.	Modificar el nombre de un cliente.
7.	Crear un SAVEPOINT A.
8.	Modificar el nombre de otro cliente.
9.	Crear un SAVEPOINT B.
10.	Hacer un ROLLBACK hasta el último SAVEPOINT creado.
11.	Hacer un SELECT de toda la tabla CUSTOMER.
12.	Si quiero que la primera modificación del nombre de un cliente que hice quede asentada definitivamente en la base, debo hacer algo?.
13.	Eliminar el departamento 10. Se puede? Por que?
14.	Insertar el departamento 50, ‘EDUCATION’ en la localidad 100.  Se puede? 
15.	Insertar el departamento 43, ‘OPERATIONS’ sin indicar la localidad. Se puede?
16.	Modificar la localidad del departmento 20, para que pertenezca a la localidad 155. Se puede? 
17.	Incrementar en un 10% el salario a todos los empleados que ganan menos que el promedio de salarios.
18.	A todos los clientes que han generado más de 5 órdenes, incrementar su límite de crédito en un 5%.
19.	Deshacer todos estos cambios.
20.	Crear una tabla EMP2 con 4 columnas: id number(3), nombre varchar(10), salario number( no puede ser nulo) y depto number(2). Definir id como clave primaria, nombre debe ser único y depto debe referenciar a la tabla de Department.

*/